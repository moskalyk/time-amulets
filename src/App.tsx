import React, { useState, useEffect } from 'react'
import './App.css'
import { ethers } from 'ethers'

import { KeyPair } from "./keypair/index.js";

import { Fluence } from '@fluencelabs/js-client'
import { registerTimeAmulet } from './main.js'

import { Button } from '@0xsequence/design-system'
import { SequenceIndexer } from '@0xsequence/indexer'

import { useOpenConnectModal } from '@0xsequence/kit'
import { useDisconnect, useAccount } from 'wagmi'
import { useWalletClient } from 'wagmi'

import time from './assets/0.png'
import time2 from './assets/1.png'
import time3 from './assets/2.png'
import time4 from './assets/3.png'
import time5 from './assets/4.png'
import time6 from './assets/5.png'
import landing from './assets/landing.png'

const nodes = [
  {
    "peerId": "12D3KooWFbasz6SnGxhPq3KWn8KgNW4asNKskxR5JizMdszM4KCN",
    "multiaddr": "/ip4/127.0.0.1/tcp/9991/ws/p2p/12D3KooWFbasz6SnGxhPq3KWn8KgNW4asNKskxR5JizMdszM4KCN"
  },
  {
    "peerId": "12D3KooWBCAWAGNMfqaBG1kUv49dkK8wSNeiTfGubLLjGQaFBf6z",
    "multiaddr": "/ip4/127.0.0.1/tcp/9992/ws/p2p/12D3KooWBCAWAGNMfqaBG1kUv49dkK8wSNeiTfGubLLjGQaFBf6z"
  },
  {
    "peerId": "12D3KooWEqbHHE1bzk1nJ8LE2Wbm2UaycYjRsSB4CTxDS342Boip",
    "multiaddr": "/ip4/127.0.0.1/tcp/9993/ws/p2p/12D3KooWEqbHHE1bzk1nJ8LE2Wbm2UaycYjRsSB4CTxDS342Boip"
  }
]

let timer = 0;
let multiplier = 1;
let isOn = false;
let interval: any;

function App() {
  const { setOpenConnectModal } = useOpenConnectModal()
  const [peerId, setPeerId] = useState<any>('')
  const [_, setHidden] = useState<any>(false)
  const [tokenID, setTokenID] = useState<any>(0)
  const { data: walletClient } = useWalletClient({chainId: 8453})
  const { address } = useAccount()
  const { disconnect } = useDisconnect()

  const images = [
    { src: time, alt: 'Image 1' },
    { src: time2, alt: 'Image 2' },
    { src: time3, alt: 'Image 3' },
    { src: time4, alt: 'Image 4' },
    { src: time5, alt: 'Image 5' },
    { src: time6, alt: 'Image 6' },
  ];

  const oscillationAmount = 1+150*0.111764706;
  const [margin, setMargin] = useState(150);
  const [marginOrange, setMarginOrange] = useState(150);
  const [direction, setDirection] = useState(1);
  const [isOwner, setIsOwner] = useState(false)

  useEffect(() => {
    // Set up an interval to update the margin

    const interval = setInterval(async () => {
      
      setMargin((prevMargin) => {
        // Calculate new margin based on the direction
        const newMargin = prevMargin + direction * oscillationAmount;
        // Check if the margin needs to be clamped and reverse the direction
        if (newMargin > 150 + oscillationAmount || newMargin < 150) {
          setDirection(-direction); // Reverse the direction
          return prevMargin; // Return the previous margin to avoid overshooting
        }
        
        return newMargin;
      });
      setMarginOrange((prevMargin) => {
        // Calculate new margin based on the direction
        const newMargin = prevMargin + direction * oscillationAmount;
        // Check if the margin needs to be clamped and reverse the direction
        if (newMargin > 150 + oscillationAmount || newMargin < 150) {
          setDirection(-direction); // Reverse the direction
          return prevMargin; // Return the previous margin to avoid overshooting
        }
        
        return newMargin;
      });
    }, 670); // 0.67 seconds

    // Clear the interval when the component unmounts
    return () => clearInterval(interval);
  }, [direction]); // The effect depends on the direction state
  React.useEffect(() => {

  }, [tokenID])
  const mint = async (_tokenID: number) => {
    setTokenID(_tokenID)
    const erc721Interface = new ethers.utils.Interface([
        'function mint(uint tokenID, string memory peerId)'
    ])
      // Encode the transfer of the NFT tokenId to recipient
    const data = erc721Interface.encodeFunctionData(
        'mint', [tokenID, peerId]
    )

      const res = await walletClient?.sendTransaction({
          to: "0xBB5C7E5179f38c69Ca171E2D48B28f6c511F25DB",
          data: data as `0x${string}`
      })
      console.log(res)

      setTimeout(() => {
        getBalance()
      }, 2000)
  }

  const updateMultiplier = async () => {
    multiplier = 1;
    const provider = new ethers.providers.JsonRpcProvider('https://nodes.sequence.app/mainnet');
    const gasPrice = await provider.getGasPrice();
    multiplier = Number(ethers.utils.formatUnits(gasPrice, 'gwei') as any)/30
  }

  const updateGears = async () => {
    multiplier = 1;
    try {
      updateMultiplier()
     // Update the CSS using the multiplier
      const gearA = document.querySelector('.gear-A') as HTMLElement;
      gearA.style.animation = `rotate-gear ${21176 * 1.4 * multiplier}ms linear infinite`;

      const gearB = document.querySelector('.gear-B') as HTMLElement;
      gearB.style.animation = `rotate-gear ${10000 * 1.4 * multiplier}ms linear infinite`;
    }catch(err){

    }
  }

  const getBalance = async () => {
    // Define the multiplier
    updateGears()
    const indexer = new SequenceIndexer('https://base-indexer.sequence.app')

    // try any contract and account address you'd like :)
    const contractAddress = '0xBB5C7E5179f38c69Ca171E2D48B28f6c511F25DB'
    const accountAddress = address
    console.log(address)

    // query Sequence Indexer for all nft balances of the account on Polygon
    const nftBalances = await indexer.getTokenBalances({
        contractAddress: contractAddress,
        accountAddress: accountAddress,
        includeMetadata: true
    })
    console.log('collection of items:', nftBalances)
    if(nftBalances.balances.length == 0){

      const contractAbi = [
        // Include the necessary ABI entries for your contract, e.g., the getPeers method
        'function getPeers() view external returns(string[] memory)',
      ];
    
      // Replace this with your contract address
      const contractAddress = '0xBB5C7E5179f38c69Ca171E2D48B28f6c511F25DB';
    
      // Replace this with your RPC endpoint
      const rpcEndpoint = 'https://nodes.sequence.app/base';
      
      // Connect to Ethereum using ethers.js
      const provider = new ethers.providers.JsonRpcProvider(rpcEndpoint);
      const contract = new ethers.Contract(contractAddress, contractAbi, provider);

      const peers = await contract.getPeers();
      if(peers.includes((await Fluence.getClient()).getPeerId())){
        setIsOwner(true)
      }
    }else{
    for(let i = 0; i < nftBalances.balances.length; i++){
        if(Number(nftBalances.balances[i].balance) > 0 ){
          setIsOwner(true)
        }
      }
    }
  }

  const connectFluence = async (keypair: any) => {
    try{
      await Fluence.connect(nodes[0].multiaddr, {debug: {printParticleId: true}, keyPair: {type: 'Ed25519', source: new Uint8Array(Object.values(keypair.privateKey._publicKey))}});
      console.log('connected ', (await Fluence.getClient()).getPeerId())
      setPeerId((await Fluence.getClient()).getPeerId())
      getBalance()
      registerTimeAmulet({
        tick: async () => {
          updateMultiplier()
          console.log('tick')
        }
      })
    }catch(err){
      console.log(err)
    }
  }

  const createIdentity = async () => {
    if(!localStorage.getItem('salt1')){
      const random = await KeyPair.randomEd25519();
      localStorage.setItem('salt1', JSON.stringify(random))
    }
    return JSON.parse(localStorage.getItem('salt1')!)
  }

  useEffect(() => {
    if(address){
      createIdentity().then((id) => {
        connectFluence(id)
      })
    }
  }, [address])

  const loop = async () => {
    interval = setInterval(() => {
      timer++;
    }, 1000 / multiplier);
  }

  const connectPeer = async () => {
    setPeerId((await Fluence.getClient()).getPeerId())
  }

  useEffect(() => {
    connectPeer()
  }, [peerId])
  return (
    <>
    {
        address
      ?
        isOwner 
      ? 
        <>
          <p style={{marginTop: '-30px'}}>gas / 30 gwei</p>
          <br/>
          <p>{timer}</p>
          <p onClick={() => setIsOwner(!isOwner)} className='title' style={{cursor: 'pointer', color: 'white', position: 'fixed', top: '20px', right: '20px'}}>{peerId}</p>
          <p onClick={() => disconnect()} className='title' style={{cursor: 'pointer', position: 'fixed', top: '40px', right: '20px'}}>sign out</p>
          <svg onDoubleClick={()=>{{clearInterval(interval);isOn = false; timer = 0;}}} onClick={() => {if(!isOn){isOn=true;loop();}else{isOn=false;clearInterval(interval);}}} className='loader-example' viewBox='0 0 600 600' xmlns='http://www.w3.org/2000/svg'>
            <g transform='translate(300, 300)'>
                <g className='gear-A'>
                    <g transform='translate(-300, -300)'>
                        <path d='m278.13 498.21c-69.699-8.4164-130.57-52.177-159.97-115-7.282-15.562-12.946-34.025-16.503-53.792-1.2787-7.1073-1.6413-13.986-1.6551-31.399-0.0155-19.661 0.23679-23.644 2.1337-33.675 7.8157-41.33 25.604-76.043 53.805-105 11.498-11.806 19.599-18.566 32.839-27.399 23.104-15.415 48.984-25.691 77.045-30.59 15.799-2.7584 41.789-3.3709 57.606-1.3577 35.5 4.5182 67.959 17.552 96.517 38.755 12.067 8.9594 32.137 29.101 41.173 41.321 19.22 25.992 31.076 54.137 37.223 88.367 1.2677 7.0583 1.6395 14.004 1.6564 30.944 0.0191 18.887-0.26246 23.421-2.0785 33.504-7.7519 43.044-27.574 80.387-58.579 110.36-29.752 28.762-65.126 46.388-107.85 53.736-9.7744 1.6812-43.233 2.4499-53.367 1.2262zm25.283-19.305c0.49457-0.62571 1.1303-4.0046 1.4127-7.5085 0.8011-9.9395 1.2671-10.429 9.9546-10.454 4.9814-0.0144 5.4044 0.49727 7.1389 8.6338 1.7201 8.0685 2.2773 8.8679 5.7155 8.1996 1.5942-0.3099 4.0299-0.77908 5.4128-1.0426l2.5143-0.47916-0.47182-17.586 5.2886-1.6781c2.9086-0.92294 5.9106-1.4397 6.671-1.1483 0.76036 0.29138 2.8588 3.8081 4.6633 7.815 2.1125 4.6911 3.7935 7.2781 4.7209 7.2652 2.7151-0.0376 9.1867-3.5267 9.1867-4.9527 0-0.78166-0.81945-4.3746-1.8212-7.9843-2.1048-7.5854-1.8661-8.0873 5.3172-11.175 4.8826-2.0987 5.6805-1.6762 10.926 5.7846 2.1674 3.0831 4.5921 5.6056 5.3881 5.6056 0.7959 0 3.2124-1.0331 5.3701-2.2959 4.4005-2.5754 4.4014-2.4508-0.0727-11.269-3.352-6.606-3.0986-7.6665 2.7592-11.549l5.0818-3.3685 12.526 12.413 3.672-2.5413c6.1693-4.2695 6.1653-4.225 1.0431-11.509-2.5415-3.614-4.6208-7.0031-4.6208-7.5314 0-1.7579 7.6413-8.7658 9.5312-8.7412 1.0234 0.0133 4.2904 1.8563 7.2599 4.0956 2.9694 2.2392 5.8951 4.0713 6.5013 4.0713 1.1642 0 7.6938-6.785 7.6938-7.9947 0-0.38967-2.4607-3.1402-5.4682-6.1122-3.0075-2.9721-5.4682-6.0744-5.4682-6.8941 0-1.9256 6.1171-9.9432 7.5862-9.9432 0.61772 0 4.1543 1.4507 7.859 3.2237 3.7047 1.773 7.1791 3.0462 7.7208 2.8293s2.0103-2.3117 3.2634-4.6551l2.2785-4.2607-2.3535-1.9816c-1.2944-1.0898-4.2676-3.3042-6.6074-4.9207-2.7282-1.885-4.2539-3.6096-4.2539-4.8084 0-2.6101 4.3472-10.91 5.7143-10.91 0.61972 0 3.9949 0.81911 7.5004 1.8202 3.5055 1.0012 7.037 1.8203 7.8476 1.8203 1.4424 0 4.4556-6.2166 4.4556-9.1922 0-0.8533-2.832-2.7191-7.2908-4.8034-7.9789-3.7298-8.0806-3.9091-6.2783-11.057 1.4855-5.8914 2.2583-6.2504 11.357-5.2764 8.8937 0.95208 8.8395 0.98634 9.8911-6.255l0.62072-4.2749-3.4662-0.90989c-1.9064-0.50045-5.4018-1.3867-7.7676-1.9695-2.3657-0.58279-4.7261-1.5707-5.2452-2.1953-0.9901-1.1914 0.01-11.74 1.2287-12.957 0.35273-0.35226 3.3938-0.78008 6.758-0.9507 9.5724-0.4855 9.9042-0.63332 10.556-4.7033 0.31627-1.9752 0.19882-4.5795-0.26109-5.7874-0.76346-2.0053-1.4961-2.2469-8.4309-2.7796-9.2372-0.70954-10.061-1.4941-9.6831-9.2253l0.26546-5.436 4.1012-1.1106c2.2555-0.61086 5.844-1.5603 7.9744-2.1098 3.7077-0.95651 3.8694-1.1436 3.7824-4.3771-0.212-7.8844-0.27-7.9285-10.434-7.9285h-9.0697l-1.3365-5.2741c-0.89418-3.5284-1.0448-5.7361-0.45491-6.6699 0.48491-0.76772 3.7521-2.6165 7.2604-4.1084s6.7044-3.0342 7.1026-3.4272c0.56027-0.55311-2.5898-11.062-3.2956-10.994-0.0891 8e-3 -3.2382 0.82067-6.9975 1.8046-10.154 2.6578-10.207 2.6432-13.206-3.6215-2.5559-5.3402-2.5726-5.4769-0.89791-7.325 0.93864-1.0358 4.0858-3.3265 6.9936-5.0906 2.9079-1.7641 5.2871-3.6076 5.2871-4.0968 0-1.2501-2.6912-6.4153-4.2963-8.2458-1.2468-1.422-1.8309-1.3086-8.2061 1.5927-3.775 1.718-7.4088 3.1237-8.0752 3.1237-1.5349 0-7.6746-7.9546-7.6746-9.9432 0-0.81968 2.4607-3.922 5.4682-6.8941 3.0075-2.9721 5.4681-5.8352 5.4681-6.3625 0-1.6056-5.5103-7.7444-6.9514-7.7444-0.74291 0-3.7807 1.648-6.7507 3.6621s-6.0537 3.9126-6.8527 4.2188c-1.7476 0.66973-9.5198-6.5658-9.5198-8.8625 0-0.83196 2.0461-4.3154 4.5468-7.741l4.5468-6.2283-2.8964-2.9843c-4.7101-4.853-5.629-4.7414-12.107 1.471-3.1789 3.0485-6.0805 5.5427-6.448 5.5427-1.7942 0-10.426-6.6547-10.426-8.0379 0-0.86335 1.4355-4.5608 3.1898-8.2166 1.7544-3.6558 3.1897-6.8132 3.1897-7.0164 0-0.48923-6.4186-4.4677-8.3589-5.1811-1.1306-0.41577-2.7197 1.0768-6.161 5.7869-2.5505 3.491-5.2067 6.5654-5.9027 6.8321-1.6717 0.64062-10.494-3.8598-11.208-5.7172-0.30718-0.79943 0.32718-4.4602 1.4098-8.1349 1.0826-3.6748 1.9684-7.0702 1.9684-7.5454 0-0.79899-9.9796-5.0209-10.494-4.4397-0.12646 0.14275-1.9226 3.6384-3.9915 7.7681-2.0689 4.1297-4.2065 7.5085-4.7504 7.5085-2.8311 0-10.948-3.0638-11.627-4.3885-0.43018-0.83999-0.46345-3.9846-0.0736-6.988 1.3439-10.361 1.5788-9.9466-6.2276-10.981l-4.3778-0.57996-5.0276 16.773-5.876-0.37364c-3.2318-0.20551-6.3824-0.87944-7.0014-1.4976-0.62646-0.62562-1.2774-4.2384-1.4682-8.1482-0.18846-3.8633-0.75861-7.5361-1.267-8.1618-1.2003-1.4773-9.3232-1.4773-10.49 0-0.49433 0.62571-1.1594 4.0726-1.4779 7.6597-0.31851 3.5871-0.80755 7.1166-1.0868 7.8432-0.56776 1.4776-12.037 3.0617-13.246 1.8294-0.38979-0.39738-1.6835-4.2037-2.8749-8.4586-2.3934-8.5476-2.0913-8.3512-10.496-6.8245l-2.9718 0.53985 0.23771 8.8242 0.23771 8.8242-5.2885 1.6781c-2.9087 0.92295-5.9106 1.4397-6.671 1.1483-0.76036-0.29138-2.8588-3.8081-4.6633-7.815-2.1126-4.6911-3.7936-7.2781-4.721-7.2652-2.715 0.0377-9.1868 3.5267-9.1868 4.9527 0 0.78166 0.81955 4.3746 1.8212 7.9843 2.1049 7.5854 1.8661 8.0873-5.3171 11.175-4.8825 2.0987-5.6805 1.6762-10.926-5.7846-2.1675-3.0831-4.5921-5.6057-5.3881-5.6057s-3.2125 1.0332-5.3702 2.2959c-4.4005 2.5754-4.4013 2.4508 0.0732 11.269 3.3467 6.5955 3.0944 7.6693-2.7053 11.514-5.7779 3.83-5.3069 3.981-12.842-4.1186l-4.6554-5.004-3.7541 2.598c-6.2623 4.3339-6.256 4.2694-1.1251 11.566 2.5414 3.614 4.6208 7.0031 4.6208 7.5314 0 1.7579-7.6412 8.7658-9.5312 8.7412-1.0234-0.0134-4.2904-1.8563-7.2599-4.0956-2.9695-2.2392-5.8951-4.0713-6.5013-4.0713-1.1668 0-7.6938 6.7863-7.6938 7.9996 0 0.39232 2.4607 3.107 5.4682 6.0325 3.0075 2.9256 5.4681 5.9393 5.4681 6.6972 0 2.017-4.7715 9.2408-6.4608 9.7814-0.79661 0.25488-4.6548-0.99578-8.5736-2.7792-3.9189-1.7835-7.5733-3.0634-8.1209-2.8442-0.5476 0.21916-2.0209 2.3158-3.274 4.6592l-2.2784 4.2608 2.3534 1.9816c1.2944 1.0898 4.2677 3.3042 6.6073 4.9207 2.7282 1.885 4.2539 3.6096 4.2539 4.8084 0 2.6101-4.3472 10.91-5.7142 10.91-0.61971 0-3.9949-0.81911-7.5004-1.8202-8.6881-2.4812-9.137-2.405-10.837 1.8387-2.4476 6.1088-2.1716 6.5987 5.8249 10.337 8.0381 3.7575 8.2405 4.1299 6.1096 11.243-1.7502 5.8424-2.1397 6.0227-10.808 5.0013-6.1912-0.72949-7.7939-0.66162-8.6211 0.36505-1.4499 1.7994-2.3964 9.6507-1.2488 10.359 0.51518 0.31798 4.0087 1.3014 7.7634 2.1854 4.3164 1.0162 7.1371 2.1865 7.6709 3.1825 0.84205 1.5712-0.0385 11.393-1.118 12.471-0.3065 0.3061-3.3485 0.73992-6.76 0.96406-9.8049 0.6442-9.9936 0.72891-10.642 4.7778-0.31627 1.9752-0.19782 4.5821 0.26323 5.7931 0.76866 2.019 1.4652 2.2447 8.3895 2.7187 9.2297 0.63176 10.104 1.4663 9.7223 9.2805l-0.26547 5.436-4.1011 1.1106c-2.2556 0.61085-5.8983 1.5749-8.0949 2.1422l-3.9938 1.0316 0.52377 5.0678c0.28805 2.7873 0.8658 5.4094 1.2839 5.8269 0.41806 0.4175 4.0253 0.39341 8.0161-0.0536 3.9908-0.44693 7.8478-0.48186 8.5711-0.0776 1.4234 0.79549 3.6825 7.3661 3.7049 10.776 0.0115 1.7608-1.2579 2.6933-7.7327 5.6807-4.2606 1.9657-7.7465 3.7669-7.7465 4.0026 0 0.57237 3.7314 10.513 3.9388 10.493 0.0893-8e-3 3.2382-0.82067 6.9975-1.8046 10.149-2.6566 10.209-2.6404 13.194 3.5978 3.0498 6.3722 3.0674 6.3341-5.4972 11.907-3.2309 2.1021-5.8743 4.2039-5.8743 4.6705 0 1.2161 2.7155 6.402 4.2963 8.2048 1.2468 1.422 1.8309 1.3086 8.2061-1.5927 3.775-1.718 7.4089-3.1236 8.0752-3.1236 1.5349 0 7.6745 7.9546 7.6745 9.9432 0 0.81968-2.4607 3.922-5.4681 6.8941-3.0075 2.9721-5.4682 5.8352-5.4682 6.3626 0 1.6143 5.514 7.7444 6.9661 7.7444 0.75087 0 3.9514-1.843 7.1124-4.0956 3.161-2.2526 6.2947-4.0956 6.964-4.0956 1.6231 0 9.0323 7.3201 9.0323 8.9237 0 0.69505-2.052 4.1724-4.5601 7.7274l-4.5601 6.4637 2.9096 2.9979c4.7245 4.8679 5.6392 4.7579 12.12-1.4573 3.179-3.0485 6.0806-5.5427 6.448-5.5427 1.7942 0 10.426 6.6546 10.426 8.0379 0 0.86336-1.4354 4.5608-3.1898 8.2166s-3.1898 6.8132-3.1898 7.0164c0 0.49227 6.4236 4.4694 8.3833 5.1905 1.1572 0.42577 2.5747-0.86707 5.6136-5.12 6.1782-8.6463 6.1056-8.6138 12.475-5.5735 6.2309 2.974 6.3352 3.3292 3.6026 12.266-0.99483 3.2537-1.8119 6.3983-1.8158 6.9881-6e-3 0.93899 9.8886 5.3242 10.488 4.648 0.12645-0.14276 1.9226-3.6384 3.9914-7.7681 2.0688-4.1297 4.2065-7.5085 4.7503-7.5085 2.9186 0 10.966 3.087 11.721 4.4964 0.48195 0.89931 0.74089 1.7914 0.57542 1.9823-0.16548 0.19095-0.57384 3.4726-0.90748 7.2925-0.68371 7.8279-0.85227 7.6069 6.5492 8.5874l4.3876 0.58125 4.5095-16.114h6.0826c3.5068 0 6.5443 0.46125 7.1729 1.0892 0.59967 0.59907 1.2861 4.2851 1.5254 8.1911 0.23933 3.906 0.84452 7.6139 1.3449 8.2396s2.8598 1.1376 5.2433 1.1376 4.7382-0.51194 5.2328-1.1376z' fill='aqua' stroke='none'></path>
                    </g>
                </g>
            </g>
            <g transform='translate(300, 390)'>
                <g className='gear-B'>
                    <g transform='translate(-300, -390)'>
                        <path d='m299.81 343.84c22.582-0.28673 42.621 15.918 46.432 38.833 4.205 25.286-12.949 49.211-38.283 53.408-25.334 4.1968-49.299-12.932-53.504-38.218-4.205-25.286 12.949-49.21 38.283-53.407 2.3751-0.39345 4.7364-0.58552 7.0724-0.61493zm-9.9014-41.047c-0.60003-0.0462-1.2851 0.042-1.968 0.21523-1.3656 0.34605-0.74081 0.21174-2.1217 0.49195-1.3808 0.28056-2.6373 0.86373-2.8905 1.7833-0.51441 1.8673 3.0771 15.499 2.3985 17.218-0.32994 0.83581-2.7291 1.4375-7.3184 3.0747-4.5893 1.6371-6.6803 2.6716-7.4721 2.2445-1.6286-0.87866-7.6574-13.63-9.2556-14.728-0.78725-0.54035-2.1455-0.18147-3.3824 0.49196-1.2372 0.67338-0.66918 0.37069-1.9372 0.9839-1.2681 0.61303-2.3199 1.5371-2.337 2.4905-0.0346 1.9361 6.8108 14.217 6.5804 16.05-0.11188 0.89143-2.5306 1.7052-4.5509 3.4744-2.0204 1.7691-3.159 4.0434-4.0589 4.0278-1.8508-0.031-13.081-8.5538-15.006-8.7936-0.94791-0.11784-1.9803 0.80155-2.7675 1.9678-0.78749 1.1661-0.41786 0.65622-1.2607 1.7833-0.8428 1.1271-1.3779 2.4048-0.95323 3.2592 0.86287 1.7342 12.807 9.9653 13.284 11.253 0.47647 1.2882-1.0175 2.738-3.2902 7.0411-2.2727 4.3031-3.214 6.5872-4.0897 6.7951-1.8008 0.42728-14.772-5.0407-16.697-4.7965-0.94767 0.12044-1.7409 1.258-2.214 2.5827-0.47319 1.3248-0.23226 0.72886-0.76874 2.0293-0.53682 1.3005-0.7465 2.6904-0.123 3.4129 1.2666 1.4667 14.6 6.074 15.652 7.5945 0.51136 0.73946-0.78853 2.961-1.8142 5.9034-1.0258 2.9422-0.28405 5.364-0.95324 5.9649-1.376 1.2361-15.401 2.6477-16.974 3.7819-0.77423 0.55826-0.8966 1.9625-0.67649 3.3514 0.22038 1.3891 0.124 0.75412 0.27675 2.1523 0.15266 1.3982 0.64338 2.7076 1.5375 3.044 1.8156 0.68227 15.721-1.6319 17.374-0.79942 0.80366 0.40467 1.1543 2.6843 2.4292 7.3793 1.2749 4.6948 2.1595 7.0005 1.6605 7.7482-1.026 1.5378-14.287 6.3527-15.529 7.8405-0.61148 0.73269-0.40454 2.1216 0.15375 3.4129 0.5583 1.2912 0.33496 0.71274 0.83024 2.0293 0.49527 1.3169 1.295 2.4475 2.2447 2.552 1.9284 0.2118 14.828-5.4707 16.636-5.0732 0.87917 0.19321 1.7604 3.9628 3.0442 5.7189 1.2837 1.7561 3.8047 4.3324 3.7207 5.227-0.17242 1.8394-9.5458 12.369-9.9321 14.267-0.19012 0.93446 0.67843 2.0485 1.7835 2.921 1.1051 0.87255 0.59872 0.45885 1.6605 1.3836 1.0617 0.92472 2.3121 1.5566 3.198 1.1991 1.7983-0.72641 10.458-11.854 12.238-12.36 0.86572-0.24574 2.6702 1.2228 6.7957 3.8126 4.1256 2.5898 6.3166 3.6938 6.4574 4.5813 0.28989 1.8248-6.1548 14.331-6.0577 16.265 0.0477 0.95243 1.1418 1.8264 2.4292 2.3983 1.2874 0.57186 0.70971 0.28937 1.968 0.92241 1.2583 0.63333 2.6131 0.9346 3.3824 0.36896 1.5619-1.1486 7.1951-14.074 8.7944-15.005 0.77766-0.45259 2.8705 0.947 6.1499 2.1523 3.2794 1.2053 5.7832 0.80442 6.3037 1.5373 1.0706 1.5073 0.8369 15.589 1.7835 17.28 0.466 0.8322 1.8516 1.1335 3.2594 1.0761 1.4079-0.0568 0.74338-0.0708 2.1525-0.0615 1.4092 0.0116 2.7904-0.32114 3.2287-1.1684 0.88927-1.721 0.17957-15.769 1.1992-17.311 0.49596-0.74975 2.806-0.81718 7.6259-1.5374 4.82-0.72029 7.2161-1.319 7.9026-0.73793 1.4115 1.1955 4.6901 14.892 6.0269 16.296 0.65836 0.69108 2.0634 0.61934 3.4132 0.21522 1.3498-0.40396 0.72336-0.24554 2.091-0.58419 1.3679-0.33855 2.6149-0.97682 2.829-1.9063 0.43411-1.8871-3.7412-15.349-3.1364-17.095 0.29418-0.84916 2.8532-1.0976 5.8117-3.0132 2.9585-1.9158 4.4332-4.0294 5.3197-3.8741 1.8233 0.31935 11.573 10.471 13.438 11.007 0.91819 0.26423 2.1148-0.47724 3.075-1.5066 0.96033-1.0292 0.49795-0.58606 1.5067-1.5681 1.0088-0.98217 1.7312-2.1649 1.4452-3.0747-0.58086-1.8478-10.984-11.348-11.347-13.16-0.17599-0.88108 1.5197-2.6922 4.4894-6.5491 2.9698-3.857 4.1455-5.8342 5.0429-5.9034 1.8458-0.14166 13.835 7.2896 15.775 7.3485 0.95513 0.0285 1.9084-1.0099 2.583-2.2445 0.67457-1.2348 0.3429-0.67466 1.0762-1.8756 0.73322-1.2007 1.1488-2.5408 0.64574-3.3514-1.0216-1.6462-13.467-8.2656-14.268-9.9313-0.38946-0.80985 0.73563-1.5438 1.7527-5.7497 1.0172-4.2058 0.38684-6.685 1.1992-7.0718 1.6705-0.79611 15.543 1.8418 17.374 1.1991 0.90116-0.31665 1.4156-1.6188 1.599-3.0132 0.18336-1.3943 0.0879-0.76829 0.33824-2.1523 0.2508-1.3842 0.14675-2.7758-0.61499-3.3514-1.5474-1.168-15.564-2.885-16.912-4.1508-0.65586-0.61542 0.11023-3.0262-0.39974-6.7336-0.50993-3.7073-1.6018-5.9661-1.0455-6.6721 1.1442-1.4525 14.726-5.2251 16.082-6.6106 0.66728-0.68229 0.54698-2.0817 0.0922-3.4129-0.45433-1.3311-0.25595-0.70838-0.64574-2.06-0.38981-1.3514-1.091-2.5577-2.0295-2.7365-1.9058-0.36317-15.234 4.2894-17.004 3.7511-0.86113-0.26174-1.6586-2.6054-3.6592-7.041-2.0005-4.4358-3.1925-6.4036-2.829-7.2256 0.7479-1.6902 12.991-8.715 13.96-10.392 0.47704-0.82628 0.033-2.1435-0.73799-3.3207-0.77106-1.1772-0.45505-0.63195-1.1685-1.8448-0.71318-1.2127-1.691-2.2111-2.6445-2.1523-1.9365 0.11998-13.679 7.9237-15.529 7.8405-0.89927-0.0402-1.8953-2.4087-3.8437-4.4276-1.9484-2.0188-4.3216-2.9174-4.3972-3.8126-0.15567-1.8411 7.2122-13.837 7.2569-15.773 0.0221-0.95345-1.0333-1.8881-2.2755-2.552-1.242-0.66407-0.66716-0.35313-1.8757-1.0761-1.2087-0.72307-2.5741-1.123-3.3824-0.61494-1.642 1.0318-8.177 13.485-9.8399 14.297-0.8087 0.39454-2.9781-0.76232-7.4722-2.6442-4.4941-1.8821-6.715-2.5336-7.0109-3.3822-0.60813-1.7452 3.5125-15.178 3.075-17.065-0.21588-0.92895-1.4298-1.601-2.7982-1.9371-1.3684-0.33588-0.77103-0.18291-2.1217-0.58419-1.3501-0.40145-2.7562-0.44623-3.4132 0.24598-1.3341 1.4058-4.5562 15.098-5.9654 16.296-0.68532 0.58247-3.0312-0.43718-5.9654-0.55344-2.9342-0.11635-5.3045 0.82484-5.9654 0.21523-1.3595-1.2542-4.044-15.083-5.3197-16.542-0.31422-0.35916-0.81444-0.53808-1.4145-0.58419z' fill='gold' fill-rule='evenodd' stroke='white'></path>
                    </g>
                </g>
            </g>
          </svg>
          <br/>

        </> 
      : 
        <>
          <p className='title'>select</p>
          { !isOwner ? <p onClick={() => setIsOwner(!isOwner)} className='title' style={{cursor: 'pointer', color: 'white', position: 'fixed', top: '20px', right: '20px'}}>{peerId}</p> : null }
          <p onClick={() => disconnect()} className='title' style={{cursor: 'pointer', position: 'fixed', top: '40px', right: '20px'}}>sign out</p>
          <br/>
          <br/>
          <div className="image-grid">
            {images.map((image, index) => (
              <div key={index} className="image-item">
                <img onClick={() => mint(index)} onMouseEnter={() => setHidden(true)} onMouseLeave={() => setHidden(false)} className='invert-image' src={image.src} alt={image.alt} />
              </div>
            ))}
          </div>
        </> 
      :
        <>
          <p>giving awareness to space through time</p>
          <br/>
          <br/>
            <Button onClick={() => setOpenConnectModal(true)} variant={'glass'} style={{
            marginLeft: `${margin}px`,
            transition: `margin-left ${0.67*2}s`
          }}></Button>
            <br/>
            <br/>
            <img src={landing} width={300} className='invert-image' />
            <br/>
            <Button onClick={() => setOpenConnectModal(true)}  variant={'glass'} 
            style={{
              marginRight: `${marginOrange}px`, 
              transition: `margin-right ${0.67*2}s`,
              }}
            ></Button>
        </>
      }
    </>
  )
}

export default App